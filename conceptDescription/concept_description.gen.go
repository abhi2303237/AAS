// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package conceptDescription

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ExtensionValueType.
const (
	ANYURI             ExtensionValueType = "ANY_URI"
	BASE64BINARY       ExtensionValueType = "BASE64BINARY"
	BOOLEAN            ExtensionValueType = "BOOLEAN"
	BYTE               ExtensionValueType = "BYTE"
	DATE               ExtensionValueType = "DATE"
	DATETIME           ExtensionValueType = "DATE_TIME"
	DECIMAL            ExtensionValueType = "DECIMAL"
	DOUBLE             ExtensionValueType = "DOUBLE"
	DURATION           ExtensionValueType = "DURATION"
	FLOAT              ExtensionValueType = "FLOAT"
	GDAY               ExtensionValueType = "GDAY"
	GMONTH             ExtensionValueType = "GMONTH"
	GMONTHDAY          ExtensionValueType = "GMONTH_DAY"
	GYEAR              ExtensionValueType = "GYEAR"
	GYEARMONTH         ExtensionValueType = "GYEAR_MONTH"
	HEXBINARY          ExtensionValueType = "HEX_BINARY"
	INT                ExtensionValueType = "INT"
	INTEGER            ExtensionValueType = "INTEGER"
	LONG               ExtensionValueType = "LONG"
	NEGATIVEINTEGER    ExtensionValueType = "NEGATIVE_INTEGER"
	NONNEGATIVEINTEGER ExtensionValueType = "NON_NEGATIVE_INTEGER"
	NONPOSITIVEINTEGER ExtensionValueType = "NON_POSITIVE_INTEGER"
	POSITIVEINTEGER    ExtensionValueType = "POSITIVE_INTEGER"
	SHORT              ExtensionValueType = "SHORT"
	STRING             ExtensionValueType = "STRING"
	TIME               ExtensionValueType = "TIME"
	UNSIGNEDBYTE       ExtensionValueType = "UNSIGNED_BYTE"
	UNSIGNEDINT        ExtensionValueType = "UNSIGNED_INT"
	UNSIGNEDLONG       ExtensionValueType = "UNSIGNED_LONG"
	UNSIGNEDSHORT      ExtensionValueType = "UNSIGNED_SHORT"
)

// Defines values for KeyType.
const (
	ANNOTATEDRELATIONSHIPELEMENT KeyType = "ANNOTATED_RELATIONSHIP_ELEMENT"
	ASSETADMINISTRATIONSHELL     KeyType = "ASSET_ADMINISTRATION_SHELL"
	BASICEVENTELEMENT            KeyType = "BASIC_EVENT_ELEMENT"
	BLOB                         KeyType = "BLOB"
	CAPABILITY                   KeyType = "CAPABILITY"
	CONCEPTDESCRIPTION           KeyType = "CONCEPT_DESCRIPTION"
	DATAELEMENT                  KeyType = "DATA_ELEMENT"
	ENTITY                       KeyType = "ENTITY"
	EVENTELEMENT                 KeyType = "EVENT_ELEMENT"
	FILE                         KeyType = "FILE"
	FRAGMENTREFERENCE            KeyType = "FRAGMENT_REFERENCE"
	GLOBALREFERENCE              KeyType = "GLOBAL_REFERENCE"
	IDENTIFIABLE                 KeyType = "IDENTIFIABLE"
	MULTILANGUAGEPROPERTY        KeyType = "MULTI_LANGUAGE_PROPERTY"
	OPERATION                    KeyType = "OPERATION"
	PROPERTY                     KeyType = "PROPERTY"
	RANGE                        KeyType = "RANGE"
	REFERABLE                    KeyType = "REFERABLE"
	REFERENCEELEMENT             KeyType = "REFERENCE_ELEMENT"
	RELATIONSHIPELEMENT          KeyType = "RELATIONSHIP_ELEMENT"
	SUBMODEL                     KeyType = "SUBMODEL"
	SUBMODELELEMENT              KeyType = "SUBMODEL_ELEMENT"
	SUBMODELELEMENTCOLLECTION    KeyType = "SUBMODEL_ELEMENT_COLLECTION"
	SUBMODELELEMENTLIST          KeyType = "SUBMODEL_ELEMENT_LIST"
)

// Defines values for MessageMessageType.
const (
	ERROR     MessageMessageType = "ERROR"
	EXCEPTION MessageMessageType = "EXCEPTION"
	INFO      MessageMessageType = "INFO"
	WARNING   MessageMessageType = "WARNING"
)

// Defines values for ReferenceType.
const (
	EXTERNALREFERENCE ReferenceType = "EXTERNAL_REFERENCE"
	MODELREFERENCE    ReferenceType = "MODEL_REFERENCE"
)

// Defines values for ServiceDescriptionProfiles.
const (
	HttpsadminShellIoaasAPI30AasxFileServerServiceSpecificationSSP001                     ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AasxFileServerServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30AssetAdministrationShellRegistryServiceSpecificationSSP001   ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30AssetAdministrationShellRegistryServiceSpecificationSSP002   ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30AssetAdministrationShellRepositoryServiceSpecificationSSP001 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30AssetAdministrationShellRepositoryServiceSpecificationSSP002 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30AssetAdministrationShellServiceSpecificationSSP001           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30AssetAdministrationShellServiceSpecificationSSP002           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30ConceptDescriptionServiceSpecificationSSP001                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/ConceptDescriptionServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30DiscoveryServiceSpecificationSSP001                          ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/DiscoveryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30SubmodelRegistryServiceSpecificationSSP001                   ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30SubmodelRegistryServiceSpecificationSSP002                   ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30SubmodelRepositoryServiceSpecificationSSP001                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30SubmodelRepositoryServiceSpecificationSSP002                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30SubmodelRepositoryServiceSpecificationSSP003                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-003"
	HttpsadminShellIoaasAPI30SubmodelRepositoryServiceSpecificationSSP004                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-004"
	HttpsadminShellIoaasAPI30SubmodelServiceSpecificationSSP001                           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30SubmodelServiceSpecificationSSP002                           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30SubmodelServiceSpecificationSSP003                           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-003"
)

// Defines values for GetAllConceptDescriptionsParamsLimit.
const (
	N1 GetAllConceptDescriptionsParamsLimit = "1"
)

// AdministrativeInformation defines model for AdministrativeInformation.
type AdministrativeInformation struct {
	Creator                    *Reference                   `json:"creator,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	Revision                   *string                      `json:"revision,omitempty"`
	TemplateId                 *string                      `json:"templateId,omitempty"`
	Version                    *string                      `json:"version,omitempty"`
}

// Base64UrlEncodedCursor defines model for Base64UrlEncodedCursor.
type Base64UrlEncodedCursor struct {
	DecodedCursor *string `json:"decodedCursor,omitempty"`
	EncodedCursor *string `json:"encodedCursor,omitempty"`
}

// ConceptDescription defines model for ConceptDescription.
type ConceptDescription struct {
	Administration             *AdministrativeInformation   `json:"administration,omitempty"`
	Category                   *string                      `json:"category,omitempty"`
	Description                *[]LangStringTextType        `json:"description,omitempty"`
	DisplayName                *[]LangStringNameType        `json:"displayName,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	Extensions                 *[]Extension                 `json:"extensions,omitempty"`
	Id                         *string                      `json:"id,omitempty"`
	IdShort                    *string                      `json:"idShort,omitempty"`
	IsCaseOf                   *[]Reference                 `json:"isCaseOf,omitempty"`
}

// DataSpecificationContent defines model for DataSpecificationContent.
type DataSpecificationContent = map[string]interface{}

// EmbeddedDataSpecification defines model for EmbeddedDataSpecification.
type EmbeddedDataSpecification struct {
	DataSpecification        *Reference                `json:"dataSpecification,omitempty"`
	DataSpecificationContent *DataSpecificationContent `json:"dataSpecificationContent,omitempty"`
}

// Extension defines model for Extension.
type Extension struct {
	Name                    *string             `json:"name,omitempty"`
	RefersTo                *[]Reference        `json:"refersTo,omitempty"`
	SemanticId              *Reference          `json:"semanticId,omitempty"`
	SupplementalSemanticIds *[]Reference        `json:"supplementalSemanticIds,omitempty"`
	Value                   *string             `json:"value,omitempty"`
	ValueType               *ExtensionValueType `json:"valueType,omitempty"`
}

// ExtensionValueType defines model for Extension.ValueType.
type ExtensionValueType string

// Key defines model for Key.
type Key struct {
	Type  *KeyType `json:"type,omitempty"`
	Value *string  `json:"value,omitempty"`
}

// KeyType defines model for Key.Type.
type KeyType string

// LangStringNameType defines model for LangStringNameType.
type LangStringNameType struct {
	Language *string `json:"language,omitempty"`
	Text     *string `json:"text,omitempty"`
}

// LangStringTextType defines model for LangStringTextType.
type LangStringTextType struct {
	Language *string `json:"language,omitempty"`
	Text     *string `json:"text,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Code          *string             `json:"code,omitempty"`
	CorrelationId *string             `json:"correlationId,omitempty"`
	MessageType   *MessageMessageType `json:"messageType,omitempty"`
	Text          *string             `json:"text,omitempty"`
	Timestamp     *string             `json:"timestamp,omitempty"`
}

// MessageMessageType defines model for Message.MessageType.
type MessageMessageType string

// Reference defines model for Reference.
type Reference struct {
	Keys               *[]Key         `json:"keys,omitempty"`
	ReferredSemanticId *Reference     `json:"referredSemanticId,omitempty"`
	Type               *ReferenceType `json:"type,omitempty"`
}

// ReferenceType defines model for Reference.Type.
type ReferenceType string

// Result defines model for Result.
type Result struct {
	Messages *[]Message `json:"messages,omitempty"`
}

// ServiceDescription The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
type ServiceDescription struct {
	Profiles *[]ServiceDescriptionProfiles `json:"profiles,omitempty"`
}

// ServiceDescriptionProfiles defines model for ServiceDescription.Profiles.
type ServiceDescriptionProfiles string

// GetAllConceptDescriptionsParams defines parameters for GetAllConceptDescriptions.
type GetAllConceptDescriptionsParams struct {
	// IdShort The Concept Description’s IdShort
	IdShort *string `form:"idShort,omitempty" json:"idShort,omitempty"`

	// IsCaseOf IsCaseOf reference (UTF8-BASE64-URL-encoded)
	IsCaseOf *string `form:"isCaseOf,omitempty" json:"isCaseOf,omitempty"`

	// DataSpecificationRef DataSpecification reference (UTF8-BASE64-URL-encoded)
	DataSpecificationRef *string `form:"dataSpecificationRef,omitempty" json:"dataSpecificationRef,omitempty"`

	// Limit The maximum number of elements in the response array
	Limit *GetAllConceptDescriptionsParamsLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
	Cursor *Base64UrlEncodedCursor `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// GetAllConceptDescriptionsParamsLimit defines parameters for GetAllConceptDescriptions.
type GetAllConceptDescriptionsParamsLimit string

// PostConceptDescriptionJSONRequestBody defines body for PostConceptDescription for application/json ContentType.
type PostConceptDescriptionJSONRequestBody = ConceptDescription

// PutConceptDescriptionByIdJSONRequestBody defines body for PutConceptDescriptionById for application/json ContentType.
type PutConceptDescriptionByIdJSONRequestBody = ConceptDescription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all Concept Descriptions
	// (GET /concept-descriptions)
	GetAllConceptDescriptions(c *fiber.Ctx, params GetAllConceptDescriptionsParams) error
	// Creates a new Concept Description
	// (POST /concept-descriptions)
	PostConceptDescription(c *fiber.Ctx) error
	// Deletes a Concept Description
	// (DELETE /concept-descriptions/{cdIdentifier})
	DeleteConceptDescriptionById(c *fiber.Ctx, cdIdentifier string) error
	// Returns a specific Concept Description
	// (GET /concept-descriptions/{cdIdentifier})
	GetConceptDescriptionById(c *fiber.Ctx, cdIdentifier string) error
	// Updates an existing Concept Description
	// (PUT /concept-descriptions/{cdIdentifier})
	PutConceptDescriptionById(c *fiber.Ctx, cdIdentifier string) error
	// Returns the self-describing information of a network resource (ServiceDescription)
	// (GET /description)
	GetDescription(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAllConceptDescriptions operation middleware
func (siw *ServerInterfaceWrapper) GetAllConceptDescriptions(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllConceptDescriptionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "idShort" -------------

	err = runtime.BindQueryParameter("form", true, false, "idShort", query, &params.IdShort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter idShort: %w", err).Error())
	}

	// ------------- Optional query parameter "isCaseOf" -------------

	err = runtime.BindQueryParameter("form", true, false, "isCaseOf", query, &params.IsCaseOf)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter isCaseOf: %w", err).Error())
	}

	// ------------- Optional query parameter "dataSpecificationRef" -------------

	err = runtime.BindQueryParameter("form", true, false, "dataSpecificationRef", query, &params.DataSpecificationRef)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter dataSpecificationRef: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", query, &params.Cursor)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cursor: %w", err).Error())
	}

	return siw.Handler.GetAllConceptDescriptions(c, params)
}

// PostConceptDescription operation middleware
func (siw *ServerInterfaceWrapper) PostConceptDescription(c *fiber.Ctx) error {

	return siw.Handler.PostConceptDescription(c)
}

// DeleteConceptDescriptionById operation middleware
func (siw *ServerInterfaceWrapper) DeleteConceptDescriptionById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "cdIdentifier" -------------
	var cdIdentifier string

	err = runtime.BindStyledParameterWithOptions("simple", "cdIdentifier", c.Params("cdIdentifier"), &cdIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cdIdentifier: %w", err).Error())
	}

	return siw.Handler.DeleteConceptDescriptionById(c, cdIdentifier)
}

// GetConceptDescriptionById operation middleware
func (siw *ServerInterfaceWrapper) GetConceptDescriptionById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "cdIdentifier" -------------
	var cdIdentifier string

	err = runtime.BindStyledParameterWithOptions("simple", "cdIdentifier", c.Params("cdIdentifier"), &cdIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cdIdentifier: %w", err).Error())
	}

	return siw.Handler.GetConceptDescriptionById(c, cdIdentifier)
}

// PutConceptDescriptionById operation middleware
func (siw *ServerInterfaceWrapper) PutConceptDescriptionById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "cdIdentifier" -------------
	var cdIdentifier string

	err = runtime.BindStyledParameterWithOptions("simple", "cdIdentifier", c.Params("cdIdentifier"), &cdIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cdIdentifier: %w", err).Error())
	}

	return siw.Handler.PutConceptDescriptionById(c, cdIdentifier)
}

// GetDescription operation middleware
func (siw *ServerInterfaceWrapper) GetDescription(c *fiber.Ctx) error {

	return siw.Handler.GetDescription(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/concept-descriptions", wrapper.GetAllConceptDescriptions)

	router.Post(options.BaseURL+"/concept-descriptions", wrapper.PostConceptDescription)

	router.Delete(options.BaseURL+"/concept-descriptions/:cdIdentifier", wrapper.DeleteConceptDescriptionById)

	router.Get(options.BaseURL+"/concept-descriptions/:cdIdentifier", wrapper.GetConceptDescriptionById)

	router.Put(options.BaseURL+"/concept-descriptions/:cdIdentifier", wrapper.PutConceptDescriptionById)

	router.Get(options.BaseURL+"/description", wrapper.GetDescription)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
