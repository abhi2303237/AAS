// Package AASRegistry provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package AASRegistry

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AssetAdministrationShellDescriptorAssetKind.
const (
	AssetAdministrationShellDescriptorAssetKindInstance      AssetAdministrationShellDescriptorAssetKind = "Instance"
	AssetAdministrationShellDescriptorAssetKindNotApplicable AssetAdministrationShellDescriptorAssetKind = "NotApplicable"
	AssetAdministrationShellDescriptorAssetKindType          AssetAdministrationShellDescriptorAssetKind = "Type"
)

// Defines values for ExtensionValueType.
const (
	XsAnyURI             ExtensionValueType = "xs:anyURI"
	XsBase64Binary       ExtensionValueType = "xs:base64Binary"
	XsBoolean            ExtensionValueType = "xs:boolean"
	XsByte               ExtensionValueType = "xs:byte"
	XsDate               ExtensionValueType = "xs:date"
	XsDateTime           ExtensionValueType = "xs:dateTime"
	XsDecimal            ExtensionValueType = "xs:decimal"
	XsDouble             ExtensionValueType = "xs:double"
	XsDuration           ExtensionValueType = "xs:duration"
	XsFloat              ExtensionValueType = "xs:float"
	XsGDay               ExtensionValueType = "xs:gDay"
	XsGMonth             ExtensionValueType = "xs:gMonth"
	XsGMonthDay          ExtensionValueType = "xs:gMonthDay"
	XsGYear              ExtensionValueType = "xs:gYear"
	XsGYearMonth         ExtensionValueType = "xs:gYearMonth"
	XsHexBinary          ExtensionValueType = "xs:hexBinary"
	XsInt                ExtensionValueType = "xs:int"
	XsInteger            ExtensionValueType = "xs:integer"
	XsLong               ExtensionValueType = "xs:long"
	XsNegativeInteger    ExtensionValueType = "xs:negativeInteger"
	XsNonNegativeInteger ExtensionValueType = "xs:nonNegativeInteger"
	XsNonPositiveInteger ExtensionValueType = "xs:nonPositiveInteger"
	XsPositiveInteger    ExtensionValueType = "xs:positiveInteger"
	XsShort              ExtensionValueType = "xs:short"
	XsString             ExtensionValueType = "xs:string"
	XsTime               ExtensionValueType = "xs:time"
	XsUnsignedByte       ExtensionValueType = "xs:unsignedByte"
	XsUnsignedInt        ExtensionValueType = "xs:unsignedInt"
	XsUnsignedLong       ExtensionValueType = "xs:unsignedLong"
	XsUnsignedShort      ExtensionValueType = "xs:unsignedShort"
)

// Defines values for KeyType.
const (
	AnnotatedRelationshipElement KeyType = "AnnotatedRelationshipElement"
	AssetAdministrationShell     KeyType = "AssetAdministrationShell"
	BasicEventElement            KeyType = "BasicEventElement"
	Blob                         KeyType = "Blob"
	Capability                   KeyType = "Capability"
	ConceptDescription           KeyType = "ConceptDescription"
	DataElement                  KeyType = "DataElement"
	Entity                       KeyType = "Entity"
	EventElement                 KeyType = "EventElement"
	File                         KeyType = "File"
	FragmentReference            KeyType = "FragmentReference"
	GlobalReference              KeyType = "GlobalReference"
	Identifiable                 KeyType = "Identifiable"
	MultiLanguageProperty        KeyType = "MultiLanguageProperty"
	Operation                    KeyType = "Operation"
	Property                     KeyType = "Property"
	Range                        KeyType = "Range"
	Referable                    KeyType = "Referable"
	ReferenceElement             KeyType = "ReferenceElement"
	RelationshipElement          KeyType = "RelationshipElement"
	Submodel                     KeyType = "Submodel"
	SubmodelElement              KeyType = "SubmodelElement"
	SubmodelElementCollection    KeyType = "SubmodelElementCollection"
	SubmodelElementList          KeyType = "SubmodelElementList"
)

// Defines values for MessageMessageType.
const (
	Error     MessageMessageType = "Error"
	Exception MessageMessageType = "Exception"
	Info      MessageMessageType = "Info"
	Undefined MessageMessageType = "Undefined"
	Warning   MessageMessageType = "Warning"
)

// Defines values for ProtocolInformationSecurityAttributesType.
const (
	NONE    ProtocolInformationSecurityAttributesType = "NONE"
	RFCTLSA ProtocolInformationSecurityAttributesType = "RFC_TLSA"
	W3CDID  ProtocolInformationSecurityAttributesType = "W3C_DID"
)

// Defines values for ReferenceType.
const (
	ReferenceTypeExternalReference ReferenceType = "ExternalReference"
	ReferenceTypeModelReference    ReferenceType = "ModelReference"
)

// Defines values for ReferenceParentType.
const (
	ReferenceParentTypeExternalReference ReferenceParentType = "ExternalReference"
	ReferenceParentTypeModelReference    ReferenceParentType = "ModelReference"
)

// Defines values for ServiceDescriptionProfiles.
const (
	HttpsadminShellIoaasAPI30AasxFileServerServiceSpecificationSSP001                     ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AasxFileServerServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30AssetAdministrationShellRegistryServiceSpecificationSSP001   ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30AssetAdministrationShellRegistryServiceSpecificationSSP002   ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRegistryServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30AssetAdministrationShellRepositoryServiceSpecificationSSP001 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30AssetAdministrationShellRepositoryServiceSpecificationSSP002 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellRepositoryServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30AssetAdministrationShellServiceSpecificationSSP001           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30AssetAdministrationShellServiceSpecificationSSP002           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/AssetAdministrationShellServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30ConceptDescriptionServiceSpecificationSSP001                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/ConceptDescriptionServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30DiscoveryServiceSpecificationSSP001                          ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/DiscoveryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30SubmodelRegistryServiceSpecificationSSP001                   ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30SubmodelRegistryServiceSpecificationSSP002                   ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRegistryServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30SubmodelRepositoryServiceSpecificationSSP001                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30SubmodelRepositoryServiceSpecificationSSP002                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30SubmodelRepositoryServiceSpecificationSSP003                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-003"
	HttpsadminShellIoaasAPI30SubmodelRepositoryServiceSpecificationSSP004                 ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelRepositoryServiceSpecification/SSP-004"
	HttpsadminShellIoaasAPI30SubmodelServiceSpecificationSSP001                           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-001"
	HttpsadminShellIoaasAPI30SubmodelServiceSpecificationSSP002                           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-002"
	HttpsadminShellIoaasAPI30SubmodelServiceSpecificationSSP003                           ServiceDescriptionProfiles = "https://admin-shell.io/aas/API/3/0/SubmodelServiceSpecification/SSP-003"
)

// Defines values for ShellDescriptorQueryQueryType.
const (
	Match ShellDescriptorQueryQueryType = "match"
	Regex ShellDescriptorQueryQueryType = "regex"
)

// Defines values for SortingDirection.
const (
	ASC  SortingDirection = "ASC"
	DESC SortingDirection = "DESC"
)

// Defines values for SortingPath.
const (
	AdministrationRevision SortingPath = "administration.revision"
	AdministrationVersion  SortingPath = "administration.version"
	Id                     SortingPath = "id"
	IdShort                SortingPath = "idShort"
)

// Defines values for GetAllAssetAdministrationShellDescriptorsParamsAssetKind.
const (
	GetAllAssetAdministrationShellDescriptorsParamsAssetKindInstance      GetAllAssetAdministrationShellDescriptorsParamsAssetKind = "Instance"
	GetAllAssetAdministrationShellDescriptorsParamsAssetKindNotApplicable GetAllAssetAdministrationShellDescriptorsParamsAssetKind = "NotApplicable"
	GetAllAssetAdministrationShellDescriptorsParamsAssetKindType          GetAllAssetAdministrationShellDescriptorsParamsAssetKind = "Type"
)

// AdministrativeInformation defines model for AdministrativeInformation.
type AdministrativeInformation struct {
	Creator                    *Reference                   `json:"creator,omitempty"`
	EmbeddedDataSpecifications *[]EmbeddedDataSpecification `json:"embeddedDataSpecifications,omitempty"`
	Revision                   *string                      `json:"revision,omitempty"`
	TemplateId                 *string                      `json:"templateId,omitempty"`
	Version                    *string                      `json:"version,omitempty"`
}

// AssetAdministrationShellDescriptor defines model for AssetAdministrationShellDescriptor.
type AssetAdministrationShellDescriptor struct {
	Administration      *AdministrativeInformation                   `json:"administration,omitempty"`
	AssetKind           *AssetAdministrationShellDescriptorAssetKind `json:"assetKind,omitempty"`
	AssetType           *string                                      `json:"assetType,omitempty"`
	Description         *[]LangStringTextType                        `json:"description,omitempty"`
	DisplayName         *[]LangStringNameType                        `json:"displayName,omitempty"`
	Endpoints           *[]Endpoint                                  `json:"endpoints,omitempty"`
	Extensions          *[]Extension                                 `json:"extensions,omitempty"`
	GlobalAssetId       *string                                      `json:"globalAssetId,omitempty"`
	Id                  string                                       `json:"id"`
	IdShort             *string                                      `json:"idShort,omitempty"`
	SpecificAssetIds    *[]SpecificAssetId                           `json:"specificAssetIds,omitempty"`
	SubmodelDescriptors *[]SubmodelDescriptor                        `json:"submodelDescriptors,omitempty"`
}

// AssetAdministrationShellDescriptorAssetKind defines model for AssetAdministrationShellDescriptor.AssetKind.
type AssetAdministrationShellDescriptorAssetKind string

// DataSpecificationContent defines model for DataSpecificationContent.
type DataSpecificationContent struct {
	ModelType string `json:"modelType"`
}

// EmbeddedDataSpecification defines model for EmbeddedDataSpecification.
type EmbeddedDataSpecification struct {
	DataSpecification        Reference                `json:"dataSpecification"`
	DataSpecificationContent DataSpecificationContent `json:"dataSpecificationContent"`
}

// Endpoint defines model for Endpoint.
type Endpoint struct {
	Interface           string              `json:"interface"`
	ProtocolInformation ProtocolInformation `json:"protocolInformation"`
}

// Extension defines model for Extension.
type Extension struct {
	Name                    string              `json:"name"`
	RefersTo                *[]Reference        `json:"refersTo,omitempty"`
	SemanticId              *Reference          `json:"semanticId,omitempty"`
	SupplementalSemanticIds *[]Reference        `json:"supplementalSemanticIds,omitempty"`
	Value                   *string             `json:"value,omitempty"`
	ValueType               *ExtensionValueType `json:"valueType,omitempty"`
}

// ExtensionValueType defines model for Extension.ValueType.
type ExtensionValueType string

// GetAssetAdministrationShellDescriptorsResult defines model for GetAssetAdministrationShellDescriptorsResult.
type GetAssetAdministrationShellDescriptorsResult struct {
	PagingMetadata *PagedResultPagingMetadata            `json:"paging_metadata,omitempty"`
	Result         *[]AssetAdministrationShellDescriptor `json:"result,omitempty"`
}

// GetSubmodelDescriptorsResult defines model for GetSubmodelDescriptorsResult.
type GetSubmodelDescriptorsResult struct {
	PagingMetadata *PagedResultPagingMetadata `json:"paging_metadata,omitempty"`
	Result         *[]SubmodelDescriptor      `json:"result,omitempty"`
}

// Key defines model for Key.
type Key struct {
	Type  KeyType `json:"type"`
	Value string  `json:"value"`
}

// KeyType defines model for Key.Type.
type KeyType string

// LangStringNameType defines model for LangStringNameType.
type LangStringNameType struct {
	Language string `json:"language"`
	Text     string `json:"text"`
}

// LangStringTextType defines model for LangStringTextType.
type LangStringTextType struct {
	Language string `json:"language"`
	Text     string `json:"text"`
}

// Message defines model for Message.
type Message struct {
	Code          *string             `json:"code,omitempty"`
	CorrelationId *string             `json:"correlationId,omitempty"`
	MessageType   *MessageMessageType `json:"messageType,omitempty"`
	Text          *string             `json:"text,omitempty"`
	Timestamp     *time.Time          `json:"timestamp,omitempty"`
}

// MessageMessageType defines model for Message.MessageType.
type MessageMessageType string

// Page defines model for Page.
type Page struct {
	Index int32 `json:"index"`
	Size  int32 `json:"size"`
}

// PagedResultPagingMetadata defines model for PagedResultPagingMetadata.
type PagedResultPagingMetadata struct {
	Cursor *string `json:"cursor,omitempty"`
}

// ProtocolInformation defines model for ProtocolInformation.
type ProtocolInformation struct {
	EndpointProtocol        *string                                  `json:"endpointProtocol,omitempty"`
	EndpointProtocolVersion *[]string                                `json:"endpointProtocolVersion,omitempty"`
	Href                    string                                   `json:"href"`
	SecurityAttributes      *[]ProtocolInformationSecurityAttributes `json:"securityAttributes,omitempty"`
	Subprotocol             *string                                  `json:"subprotocol,omitempty"`
	SubprotocolBody         *string                                  `json:"subprotocolBody,omitempty"`
	SubprotocolBodyEncoding *string                                  `json:"subprotocolBodyEncoding,omitempty"`
}

// ProtocolInformationSecurityAttributes defines model for ProtocolInformationSecurityAttributes.
type ProtocolInformationSecurityAttributes struct {
	Key   string                                    `json:"key"`
	Type  ProtocolInformationSecurityAttributesType `json:"type"`
	Value string                                    `json:"value"`
}

// ProtocolInformationSecurityAttributesType defines model for ProtocolInformationSecurityAttributes.Type.
type ProtocolInformationSecurityAttributesType string

// Reference defines model for Reference.
type Reference struct {
	Keys               []Key            `json:"keys"`
	ReferredSemanticId *ReferenceParent `json:"referredSemanticId,omitempty"`
	Type               ReferenceType    `json:"type"`
}

// ReferenceType defines model for Reference.Type.
type ReferenceType string

// ReferenceParent defines model for ReferenceParent.
type ReferenceParent struct {
	Keys []Key               `json:"keys"`
	Type ReferenceParentType `json:"type"`
}

// ReferenceParentType defines model for ReferenceParent.Type.
type ReferenceParentType string

// Result defines model for Result.
type Result struct {
	Messages *[]Message `json:"messages,omitempty"`
}

// ServiceDescription The Description object enables servers to present their capabilities to the clients, in particular which profiles they implement. At least one defined profile is required. Additional, proprietary attributes might be included. Nevertheless, the server must not expect that a regular client understands them.
type ServiceDescription struct {
	Profiles *[]ServiceDescriptionProfiles `json:"profiles,omitempty"`
}

// ServiceDescriptionProfiles defines model for ServiceDescription.Profiles.
type ServiceDescriptionProfiles string

// ShellDescriptorQuery defines model for ShellDescriptorQuery.
type ShellDescriptorQuery struct {
	CombinedWith *ShellDescriptorQuery `json:"combinedWith,omitempty"`

	// ExtensionName If this property is set, the query applies only to the extension of this name. In this case, the path must reference the value property of the extension object.
	ExtensionName *string                        `json:"extensionName,omitempty"`
	Path          string                         `json:"path"`
	QueryType     *ShellDescriptorQueryQueryType `json:"queryType,omitempty"`
	Value         string                         `json:"value"`
}

// ShellDescriptorQueryQueryType defines model for ShellDescriptorQuery.QueryType.
type ShellDescriptorQueryQueryType string

// ShellDescriptorSearchRequest defines model for ShellDescriptorSearchRequest.
type ShellDescriptorSearchRequest struct {
	Page   *Page                 `json:"page,omitempty"`
	Query  *ShellDescriptorQuery `json:"query,omitempty"`
	SortBy *Sorting              `json:"sortBy,omitempty"`
}

// ShellDescriptorSearchResponse defines model for ShellDescriptorSearchResponse.
type ShellDescriptorSearchResponse struct {
	Hits  []AssetAdministrationShellDescriptor `json:"hits"`
	Total int64                                `json:"total"`
}

// Sorting defines model for Sorting.
type Sorting struct {
	Direction *SortingDirection `json:"direction,omitempty"`
	Path      []SortingPath     `json:"path"`
}

// SortingDirection defines model for Sorting.Direction.
type SortingDirection string

// SortingPath defines model for Sorting.Path.
type SortingPath string

// SpecificAssetId defines model for SpecificAssetId.
type SpecificAssetId struct {
	ExternalSubjectId       *Reference   `json:"externalSubjectId,omitempty"`
	Name                    string       `json:"name"`
	SemanticId              *Reference   `json:"semanticId,omitempty"`
	SupplementalSemanticIds *[]Reference `json:"supplementalSemanticIds,omitempty"`
	Value                   string       `json:"value"`
}

// SubmodelDescriptor defines model for SubmodelDescriptor.
type SubmodelDescriptor struct {
	Administration         *AdministrativeInformation `json:"administration,omitempty"`
	Description            *[]LangStringTextType      `json:"description,omitempty"`
	DisplayName            *[]LangStringNameType      `json:"displayName,omitempty"`
	Endpoints              []Endpoint                 `json:"endpoints"`
	Extensions             *[]Extension               `json:"extensions,omitempty"`
	Id                     string                     `json:"id"`
	IdShort                *string                    `json:"idShort,omitempty"`
	SemanticId             *Reference                 `json:"semanticId,omitempty"`
	SupplementalSemanticId *[]Reference               `json:"supplementalSemanticId,omitempty"`
}

// GetAllAssetAdministrationShellDescriptorsParams defines parameters for GetAllAssetAdministrationShellDescriptors.
type GetAllAssetAdministrationShellDescriptorsParams struct {
	// Limit The maximum number of elements in the response array
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// AssetKind The Asset's kind (Instance or Type)
	AssetKind *GetAllAssetAdministrationShellDescriptorsParamsAssetKind `form:"assetKind,omitempty" json:"assetKind,omitempty"`

	// AssetType The Asset's type (UTF8-BASE64-URL-encoded)
	AssetType *string `form:"assetType,omitempty" json:"assetType,omitempty"`
}

// GetAllAssetAdministrationShellDescriptorsParamsAssetKind defines parameters for GetAllAssetAdministrationShellDescriptors.
type GetAllAssetAdministrationShellDescriptorsParamsAssetKind string

// GetAllSubmodelDescriptorsThroughSuperpathParams defines parameters for GetAllSubmodelDescriptorsThroughSuperpath.
type GetAllSubmodelDescriptorsThroughSuperpathParams struct {
	// Limit The maximum number of elements in the response array
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// SearchShellDescriptorsJSONRequestBody defines body for SearchShellDescriptors for application/json ContentType.
type SearchShellDescriptorsJSONRequestBody = ShellDescriptorSearchRequest

// PostAssetAdministrationShellDescriptorJSONRequestBody defines body for PostAssetAdministrationShellDescriptor for application/json ContentType.
type PostAssetAdministrationShellDescriptorJSONRequestBody = AssetAdministrationShellDescriptor

// PutAssetAdministrationShellDescriptorByIdJSONRequestBody defines body for PutAssetAdministrationShellDescriptorById for application/json ContentType.
type PutAssetAdministrationShellDescriptorByIdJSONRequestBody = AssetAdministrationShellDescriptor

// PostSubmodelDescriptorThroughSuperpathJSONRequestBody defines body for PostSubmodelDescriptorThroughSuperpath for application/json ContentType.
type PostSubmodelDescriptorThroughSuperpathJSONRequestBody = SubmodelDescriptor

// PutSubmodelDescriptorByIdThroughSuperpathJSONRequestBody defines body for PutSubmodelDescriptorByIdThroughSuperpath for application/json ContentType.
type PutSubmodelDescriptorByIdThroughSuperpathJSONRequestBody = SubmodelDescriptor

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns the self-describing information of a network resource (ServiceDescription)
	// (GET /description)
	GetDescription(c *fiber.Ctx) error

	// (POST /search)
	SearchShellDescriptors(c *fiber.Ctx) error
	// Deletes all Asset Administration Shell Descriptors
	// (DELETE /shell-descriptors)
	DeleteAllShellDescriptors(c *fiber.Ctx) error
	// Returns all Asset Administration Shell Descriptors
	// (GET /shell-descriptors)
	GetAllAssetAdministrationShellDescriptors(c *fiber.Ctx, params GetAllAssetAdministrationShellDescriptorsParams) error
	// Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
	// (POST /shell-descriptors)
	PostAssetAdministrationShellDescriptor(c *fiber.Ctx) error
	// Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
	// (DELETE /shell-descriptors/{aasIdentifier})
	DeleteAssetAdministrationShellDescriptorById(c *fiber.Ctx, aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}) error
	// Returns a specific Asset Administration Shell Descriptor
	// (GET /shell-descriptors/{aasIdentifier})
	GetAssetAdministrationShellDescriptorById(c *fiber.Ctx, aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}) error
	// Updates an existing Asset Administration Shell Descriptor
	// (PUT /shell-descriptors/{aasIdentifier})
	PutAssetAdministrationShellDescriptorById(c *fiber.Ctx, aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}) error
	// Returns all Submodel Descriptors
	// (GET /shell-descriptors/{aasIdentifier}/submodel-descriptors)
	GetAllSubmodelDescriptorsThroughSuperpath(c *fiber.Ctx, aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}, params GetAllSubmodelDescriptorsThroughSuperpathParams) error
	// Creates a new Submodel Descriptor, i.e. registers a submodel
	// (POST /shell-descriptors/{aasIdentifier}/submodel-descriptors)
	PostSubmodelDescriptorThroughSuperpath(c *fiber.Ctx, aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}) error
	// Deletes a Submodel Descriptor, i.e. de-registers a submodel
	// (DELETE /shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier})
	DeleteSubmodelDescriptorByIdThroughSuperpath(c *fiber.Ctx, aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}, submodelIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}) error
	// Returns a specific Submodel Descriptor
	// (GET /shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier})
	GetSubmodelDescriptorByIdThroughSuperpath(c *fiber.Ctx, aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}, submodelIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}) error
	// Updates an existing Submodel Descriptor
	// (PUT /shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier})
	PutSubmodelDescriptorByIdThroughSuperpath(c *fiber.Ctx, aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}, submodelIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetDescription operation middleware
func (siw *ServerInterfaceWrapper) GetDescription(c *fiber.Ctx) error {

	return siw.Handler.GetDescription(c)
}

// SearchShellDescriptors operation middleware
func (siw *ServerInterfaceWrapper) SearchShellDescriptors(c *fiber.Ctx) error {

	return siw.Handler.SearchShellDescriptors(c)
}

// DeleteAllShellDescriptors operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllShellDescriptors(c *fiber.Ctx) error {

	return siw.Handler.DeleteAllShellDescriptors(c)
}

// GetAllAssetAdministrationShellDescriptors operation middleware
func (siw *ServerInterfaceWrapper) GetAllAssetAdministrationShellDescriptors(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllAssetAdministrationShellDescriptorsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", query, &params.Cursor)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cursor: %w", err).Error())
	}

	// ------------- Optional query parameter "assetKind" -------------

	err = runtime.BindQueryParameter("form", true, false, "assetKind", query, &params.AssetKind)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter assetKind: %w", err).Error())
	}

	// ------------- Optional query parameter "assetType" -------------

	err = runtime.BindQueryParameter("form", true, false, "assetType", query, &params.AssetType)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter assetType: %w", err).Error())
	}

	return siw.Handler.GetAllAssetAdministrationShellDescriptors(c, params)
}

// PostAssetAdministrationShellDescriptor operation middleware
func (siw *ServerInterfaceWrapper) PostAssetAdministrationShellDescriptor(c *fiber.Ctx) error {

	return siw.Handler.PostAssetAdministrationShellDescriptor(c)
}

// DeleteAssetAdministrationShellDescriptorById operation middleware
func (siw *ServerInterfaceWrapper) DeleteAssetAdministrationShellDescriptorById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "aasIdentifier" -------------
	var aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "aasIdentifier", c.Params("aasIdentifier"), &aasIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aasIdentifier: %w", err).Error())
	}

	return siw.Handler.DeleteAssetAdministrationShellDescriptorById(c, aasIdentifier)
}

// GetAssetAdministrationShellDescriptorById operation middleware
func (siw *ServerInterfaceWrapper) GetAssetAdministrationShellDescriptorById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "aasIdentifier" -------------
	var aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "aasIdentifier", c.Params("aasIdentifier"), &aasIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aasIdentifier: %w", err).Error())
	}

	return siw.Handler.GetAssetAdministrationShellDescriptorById(c, aasIdentifier)
}

// PutAssetAdministrationShellDescriptorById operation middleware
func (siw *ServerInterfaceWrapper) PutAssetAdministrationShellDescriptorById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "aasIdentifier" -------------
	var aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "aasIdentifier", c.Params("aasIdentifier"), &aasIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aasIdentifier: %w", err).Error())
	}

	return siw.Handler.PutAssetAdministrationShellDescriptorById(c, aasIdentifier)
}

// GetAllSubmodelDescriptorsThroughSuperpath operation middleware
func (siw *ServerInterfaceWrapper) GetAllSubmodelDescriptorsThroughSuperpath(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "aasIdentifier" -------------
	var aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "aasIdentifier", c.Params("aasIdentifier"), &aasIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aasIdentifier: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllSubmodelDescriptorsThroughSuperpathParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", query, &params.Cursor)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cursor: %w", err).Error())
	}

	return siw.Handler.GetAllSubmodelDescriptorsThroughSuperpath(c, aasIdentifier, params)
}

// PostSubmodelDescriptorThroughSuperpath operation middleware
func (siw *ServerInterfaceWrapper) PostSubmodelDescriptorThroughSuperpath(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "aasIdentifier" -------------
	var aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "aasIdentifier", c.Params("aasIdentifier"), &aasIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aasIdentifier: %w", err).Error())
	}

	return siw.Handler.PostSubmodelDescriptorThroughSuperpath(c, aasIdentifier)
}

// DeleteSubmodelDescriptorByIdThroughSuperpath operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubmodelDescriptorByIdThroughSuperpath(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "aasIdentifier" -------------
	var aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "aasIdentifier", c.Params("aasIdentifier"), &aasIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aasIdentifier: %w", err).Error())
	}

	// ------------- Path parameter "submodelIdentifier" -------------
	var submodelIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "submodelIdentifier", c.Params("submodelIdentifier"), &submodelIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter submodelIdentifier: %w", err).Error())
	}

	return siw.Handler.DeleteSubmodelDescriptorByIdThroughSuperpath(c, aasIdentifier, submodelIdentifier)
}

// GetSubmodelDescriptorByIdThroughSuperpath operation middleware
func (siw *ServerInterfaceWrapper) GetSubmodelDescriptorByIdThroughSuperpath(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "aasIdentifier" -------------
	var aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "aasIdentifier", c.Params("aasIdentifier"), &aasIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aasIdentifier: %w", err).Error())
	}

	// ------------- Path parameter "submodelIdentifier" -------------
	var submodelIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "submodelIdentifier", c.Params("submodelIdentifier"), &submodelIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter submodelIdentifier: %w", err).Error())
	}

	return siw.Handler.GetSubmodelDescriptorByIdThroughSuperpath(c, aasIdentifier, submodelIdentifier)
}

// PutSubmodelDescriptorByIdThroughSuperpath operation middleware
func (siw *ServerInterfaceWrapper) PutSubmodelDescriptorByIdThroughSuperpath(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "aasIdentifier" -------------
	var aasIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "aasIdentifier", c.Params("aasIdentifier"), &aasIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter aasIdentifier: %w", err).Error())
	}

	// ------------- Path parameter "submodelIdentifier" -------------
	var submodelIdentifier struct {
		Char     *string  `json:"char,omitempty"`
		Direct   *bool    `json:"direct,omitempty"`
		Double   *float64 `json:"double,omitempty"`
		Float    *float32 `json:"float,omitempty"`
		Int      *int32   `json:"int,omitempty"`
		Long     *int64   `json:"long,omitempty"`
		ReadOnly *bool    `json:"readOnly,omitempty"`
		Short    *int32   `json:"short,omitempty"`
	}

	err = runtime.BindStyledParameterWithOptions("simple", "submodelIdentifier", c.Params("submodelIdentifier"), &submodelIdentifier, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter submodelIdentifier: %w", err).Error())
	}

	return siw.Handler.PutSubmodelDescriptorByIdThroughSuperpath(c, aasIdentifier, submodelIdentifier)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/description", wrapper.GetDescription)

	router.Post(options.BaseURL+"/search", wrapper.SearchShellDescriptors)

	router.Delete(options.BaseURL+"/shell-descriptors", wrapper.DeleteAllShellDescriptors)

	router.Get(options.BaseURL+"/shell-descriptors", wrapper.GetAllAssetAdministrationShellDescriptors)

	router.Post(options.BaseURL+"/shell-descriptors", wrapper.PostAssetAdministrationShellDescriptor)

	router.Delete(options.BaseURL+"/shell-descriptors/:aasIdentifier", wrapper.DeleteAssetAdministrationShellDescriptorById)

	router.Get(options.BaseURL+"/shell-descriptors/:aasIdentifier", wrapper.GetAssetAdministrationShellDescriptorById)

	router.Put(options.BaseURL+"/shell-descriptors/:aasIdentifier", wrapper.PutAssetAdministrationShellDescriptorById)

	router.Get(options.BaseURL+"/shell-descriptors/:aasIdentifier/submodel-descriptors", wrapper.GetAllSubmodelDescriptorsThroughSuperpath)

	router.Post(options.BaseURL+"/shell-descriptors/:aasIdentifier/submodel-descriptors", wrapper.PostSubmodelDescriptorThroughSuperpath)

	router.Delete(options.BaseURL+"/shell-descriptors/:aasIdentifier/submodel-descriptors/:submodelIdentifier", wrapper.DeleteSubmodelDescriptorByIdThroughSuperpath)

	router.Get(options.BaseURL+"/shell-descriptors/:aasIdentifier/submodel-descriptors/:submodelIdentifier", wrapper.GetSubmodelDescriptorByIdThroughSuperpath)

	router.Put(options.BaseURL+"/shell-descriptors/:aasIdentifier/submodel-descriptors/:submodelIdentifier", wrapper.PutSubmodelDescriptorByIdThroughSuperpath)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+FcAAAD//y2PJ9NYgQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
